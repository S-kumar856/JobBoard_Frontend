import React, { useEffect, useState } from "react";
import { crateJobService } from "../../services";
import { useNavigate, useParams } from "react-router-dom";
import { updateJobService, getJobByIdService } from "../../services";


function NewJobs() {
    const navigate = useNavigate();
    const [isEdit, setIsEdit] = useState(false);
    const { id } = useParams();
    useEffect(() =>{
        if(id){
            setIsEdit(true)
        }
    },[id])
     
    const [jobFormData, setJobFormData] = useState({
        companyName: "",
        jobPosition: "",
        salary: "",
        jobType: "",
        jobDescription:"",
        jobRequirements:"",
        location:"",
        skills:"",
        Company:""
    })

    useEffect(()=>{
        if(isEdit && id){
            const fetchData = async () => {
                const res = await getJobByIdService(id)
                if(res.status === 200){
                    const data = await res.json()
                    setJobFormData(data)
                }
                else{
                    console.log(res)
                }
            }
            fetchData();
        }
    },[isEdit, id])

    const handleJobformData = (e) =>{
        const { name, value} = e.target;
        setJobFormData({...jobFormData, [name]:value})
    }

    const handlejobSubmitData = async (e) =>{
        e.preventDefault();
        const  res = isEdit ? await updateJobService(id, jobFormData) : await crateJobService(jobFormData)
        if(res.status === 200){
            const data = await res.json()
            console.log(data)
            
            setJobFormData({
                companyName: "",
                jobPosition: "",
                salary: "",
                jobType: "",
                jobDescription:"",
                jobRequirements:"",
                location:"",
                skills:"",
                Company:""
            })
            alert(`Job ${isEdit ? 'updated' : 'created'} successfully`)
            navigate('/home')
        } 
        else if( res.status === 401){
            alert("Login to create a Job")
        }
        else{
            console.log(res)
            alert('You are not authorized to update  this job')
        }
    };

    return (
        <>
            <h1>New Job</h1>
            <form onSubmit={handlejobSubmitData}>
                <input type="text" value={jobFormData.companyName}
                    onChange={handleJobformData}
                    name="companyName" placeholder="Enter company name" />
                <input type="text" value={jobFormData.jobPosition}
                    onChange={handleJobformData}
                    name="jobPosition" placeholder="Enter job position" />
                <input type="text" value={jobFormData.salary}
                    onChange={handleJobformData}
                    name="salary" placeholder="Enter Salary" />

                <input type="text" name="jobDescription" value={jobFormData.jobDescription} 
                onChange={handleJobformData} placeholder="Enter job description"/>

                <input type="text" name="jobRequirements" value={jobFormData.jobRequirements} 
                onChange={handleJobformData} placeholder="Enter job requirements"/>
                <input type="text" name="location" value={jobFormData.location} 
                onChange={handleJobformData} placeholder="Enter job location" />

                <input type="text" name="skills" value={jobFormData.skills} 
                onChange={handleJobformData} placeholder="Enter required skills"/>

                <input type="text" name="Company" value={jobFormData.Company} 
                onChange={handleJobformData} placeholder="Enter company type"/>



                <select name="jobType" value={jobFormData.jobType} 
                onChange={handleJobformData}>

                    <option value="">Select Job Type</option>
                    <option value="full-time">full-time</option>
                    <option value="part-time">part-time</option>
                    <option value="contract">contract</option>
                    <option value="internship">internship</option>
                    <option value="freelance">freelance</option>
                </select>

                <button type="submit">{isEdit ? 'update': 'Post job'}</button>

            </form>
        </>
    )
}

export default NewJobs;


//home

import React, { useCallback, useEffect, useRef, useState } from "react";
import { getJobsService } from "../../services";
import './home.css'
import { useNavigate, Link } from "react-router-dom";
import { deleteJobService } from "../../services";
import { toast } from 'react-toastify';


function Home() {
    const [jobs, setJobs] = useState([]);
    const [loading, setLoading] = useState(true);
    const [limit, setLimit] = useState(10);
    const [offset, setOffset] = useState(0);
    const [count, setCount] = useState(0);
    const [search, setSearch] = useState('');

    const navigate = useNavigate();
    const abortControllerRef = useRef(null)
    const debounceTimerRef = useRef(null)

    // reading the data from the backend
    const fetchJob = useCallback(async () => {

        // cancle any ongoing request
        if (abortControllerRef.current) {
            abortControllerRef.current.abort()
        }

        // create a new AbortController
        abortControllerRef.current = new AbortController()
        const signal = abortControllerRef.current.signal

        try {
            setLoading(true);
            const response = await getJobsService(limit, offset * limit, search);

            if (response.status === 200) {
                const data = await response.json()
                setJobs(data.jobs)
                setCount(data.count)
            }
            else {
                console.log('Failed to fetch jobs', response)
            }
        }
        catch (err) {
            if (err.name === 'AbortError') {
                console.log('Request was cancled')
            } else {
                console.log('Error fetching jobs', err)
                toast.error("Failed to fetch jobs. Please try again later.");
            }
        }
        finally {
            setLoading(false)
        }
    }, [limit, offset, search])

    // debounced fetch jobs

    const debouncedFetchJobs = useCallback(() => {
        // clear any existing timer
        if (debounceTimerRef.current) {
            clearTimeout(debounceTimerRef.current)
        }

        // set a new timer
        debounceTimerRef.current = setTimeout(() => {
            fetchJob()
        }, 2000); // debunce time 2000ms
    }, [fetchJob])


    // Effect to trigger debounced fetch
    useEffect(() => {
        // adding debouncing
        debouncedFetchJobs()

        // Cleanup function
        return () => {
            if (debounceTimerRef.current) {
                clearTimeout(debounceTimerRef.current)
            }
            if (abortControllerRef.current) {
                abortControllerRef.current.abort()
            }
        }

    }, [limit, offset, search, debouncedFetchJobs])

    //  handle event for deeleting job
    const handleJobDelete = async (id) => {
        try {
            const res = await deleteJobService(id)
            if (res.status === 200) {
                const data = await res.json()
                console.log(data)
                toast.success("Job deleted Successfully")
                fetchJob()
            }
            else if (res.status === 401) {
                toast.error('login to delete job')
            }
            else {
                console.log(res)
                toast.error('you are not authorized to delete this job')
            }

        } catch (error) {
            console.log(error)
        }
    }

    // logout
    const handleLogout = () => {
        localStorage.removeItem('token')
        toast.success("Logout Successfully")
    }

    return (
        <div>
            <h1>Well Come to HomePage</h1>
            <input type="text" 
            onChange={(e) => setSearch(e.target.value)} 
            value={search}
            placeholder="Search Jobs" />

            {loading ? <h1>Loading....</h1> : <>

            <Link to={'/login'} onClick={handleLogout}>logout</Link>

                {jobs.map((job) => (
                    <div key={job.id}>
                        <div className="joob">
                            <h3>{job.companyName}</h3>
                            <h3>{job.jobPosition}</h3>
                            <h3>{job.jobType}</h3>
                            <h3>{job.salary}</h3>
                            <h3>{job.skills}</h3>
                            <h3>{job.remote}</h3>
                            <h3>{job.logoUrl}</h3>
                            <p>{job.descripion}</p>
                            <p>{job.location}</p>
                            <button onClick={() => navigate(`/updatejob/${job._id}`)}>Edit</button>
                            <button onClick={() => handleJobDelete(job._id)}>Delete</button>
                        </div>
                    </div>))}
                {/* </div> */}
                <select value={limit} onChange={(e) => setLimit(e.target.value)}>
                    <option value="10">10</option>
                    <option value="15">15</option>
                    <option value="20">20</option>
                    <option value="25">25</option>
                    <option value="30">30</option>
                </select>
                <button disabled={offset === 0} onClick={() => setOffset((offset) => offset - 1)}>Prev</button>
                <button disabled={offset * limit + limit >= count} onClick={() => setOffset((offset) => offset + 1)}>Next</button>
            </>}
        </div>
    )
}

export default Home;



/////////////////////////

import { useState, useEffect, useCallback, useRef } from "react";
import { getJobsService } from "../../services";
import { useNavigate } from "react-router-dom";
// import { deleteJobService } from "../../services";
import Header from "../headers/Header";
import "./home.css";
// import logo from "../images/india-logo.png";

export default function Home() {
  const [jobs, setJobs] = useState([]);
  const [loading, setLoading] = useState(true);
  const [limit, setLimit] = useState(10);
  const [offset, setOffset] = useState(0);
  const [count, setCount] = useState(0);
  const [search, setSearch] = useState("");

  const navigate = useNavigate();
  const abortControllerRef = useRef(null);
  const debounceTimerRef = useRef(null);

  const fetchJobs = useCallback(async () => {
    // Cancel any ongoing request
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
    }

    // Create a new AbortController
    abortControllerRef.current = new AbortController();
    const signal = abortControllerRef.current.signal;

    try {
      setLoading(true);
      const res = await getJobsService({
        limit,
        offset: offset * limit,
        name: search,
        signal,
      });

      if (res.status === 200) {
        const data = await res.json();
        setJobs(data.jobs);
        setCount(data.count);
      } else {
        console.error("Failed to fetch jobs", res);
      }
    } catch (error) {
      // Handle abort or other errors
      if (error.name === "AbortError") {
        console.log("Request was cancelled");
      } else {
        console.error("Error fetching jobs", error);
      }
    } finally {
      setLoading(false);
    }
  }, [limit, offset, search]);

  // Debounced fetch jobs
  const debouncedFetchJobs = useCallback(() => {
    // Clear any existing timer
    if (debounceTimerRef.current) {
      clearTimeout(debounceTimerRef.current);
    }

    // Set a new timer
    debounceTimerRef.current = setTimeout(() => {
      fetchJobs();
    }, 2000); // 500ms debounce time
  }, [fetchJobs]);

  // Effect to trigger debounced fetch
  useEffect(() => {
    debouncedFetchJobs();

    // Cleanup function
    return () => {
      if (debounceTimerRef.current) {
        clearTimeout(debounceTimerRef.current);
      }
      if (abortControllerRef.current) {
        abortControllerRef.current.abort();
      }
    };
  }, [limit, offset, search, debouncedFetchJobs]);


  return (
    <div>
      <Header />
      <h1>Home</h1>
      <div className="searchComponent">
        <div className="search">
          <input
            type="text"
            onChange={(e) => setSearch(e.target.value)}
            value={search}
            placeholder="Search"
          />
        </div>
        <div className="skillset">
          <div className="skills">
            <select value={limit}>
              <option value="#">skills</option>
              <option value="python">python</option>
              <option value="java">java</option>
              <option value="HTML">HTML</option>
              <option value="CSS">CSS</option>
            </select>
          </div>
          <div className="clear">
            <button>Clear</button>
          </div>
          <div className="btn">
            <button onClick={() => navigate(`/newjob/`)}>+ Add Job</button>
          </div>
        </div>
      </div>

      {loading ? (
        <h1>Loading...</h1>
      ) : (
        <div className="jobs">
          <div
          // style={{
          //   height: "400px",
          //   width: "400px",
          //   overflow: "scroll",
          //   border: "1px solid black",
          //   margin: "10px",
          //   padding: "10px",
          // }}
          >
            {jobs.map((job) => (
              <div key={job.id} className="Job-card">
                <div className="company">
                  <div className="image">
                    <img src={job.logoUrl} alt="logo" />
                  </div>

                  <div className="company-desc">
                    <div className="job-position">{job.jobPosition}</div>
                    <div className="specs">
                      <i className="fa-solid fa-user-group">11-50</i>
                      <div className="job-salary">{job.salary}</div>
                      <div className="flex">
                        {/* <img src={logo} alt="india-logo" /> */}
                        <div className="job-location">{job.location}</div>
                      </div>
                    </div>
                    <div className="job-specs">
                      <div className="remote">{job.remote}</div>
                      <div className="job-type">{job.jobType}</div>
                    </div>
                  </div>
                </div>
                <div className="right">
                  <div className="skills">
                    {job.skills.map((item) => (
                      <div key={job._id} className="skill">
                        {item}
                      </div>
                    ))}
                  </div>
                  <div className="edit">
                    <button
                      className="editBtn"
                      onClick={() => navigate(`/editJob/${job._id}`)}
                    >
                      Edit Details
                    </button>
                    {/* <button onClick={() => handleDeleteJob(job._id)}>
                    Delete
                  </button> */}
                    <button className="viewDetails">View Details</button>
                  </div>
                </div>
              </div>
            ))}
          </div>
          <div className="pagination">
            <select
              value={limit}
              onChange={(e) => setLimit(e.target.value)}
            >
              <option value="10">10</option>
              <option value="15">15</option>
              <option value="20">20</option>
              <option value="25">25</option>
              <option value="30">30</option>
            </select>
            <button
              disabled={offset === 0}
              onClick={() => setOffset((prevOffset) => prevOffset - 1)}
            >
              Prev
            </button>
            <button
              disabled={offset * limit + limit >= count}
              onClick={() => setOffset((prevOffset) => prevOffset + 1)}
            >
              Next
            </button>
          </div>
        </div>
      )}
    </div>
  );
}


//////////// newjob


import React, { useEffect, useState } from "react";
import { crateJobService } from "../../services";
import { useNavigate } from "react-router-dom";
import { toast } from 'react-toastify';


function NewJobs() {
    const navigate = useNavigate();
    const [jobFormData, setJobFormData] = useState({
        companyName: "",
        jobPosition: "",
        salary: "",
        jobType: "",
        jobDescription:"",
        jobRequirements:"",
        location:"",
        skills:"",
        Company:""
    });

    const handleJobformData = (e) =>{
        const { name, value} = e.target;
        setJobFormData({...jobFormData, [name]:value})
    }

    const handlejobSubmitData = async (e) =>{
        e.preventDefault();
        const  res = await crateJobService(jobFormData)
        if(res.status === 200){
            const data = await res.json()
            console.log(data)
            
            setJobFormData({
                companyName: "",
                jobPosition: "",
                salary: "",
                jobType: "",
                jobDescription:"",
                jobRequirements:"",
                location:"",
                skills:"",
                Company:""
            })
            toast.success(`Job created successfully`)
            navigate('/home')
        } 
        else if( res.status === 401){
            toast.error("Login to create a Job")
        }
        else{
            console.log(res)
            toast.error('You are not authorized to update  this job')
        }
    };

    return (
        <>
            <h1>New Job</h1>
            <form onSubmit={handlejobSubmitData}>
                <input type="text" value={jobFormData.companyName}
                    onChange={handleJobformData}
                    name="companyName" placeholder="Enter company name" />
                <input type="text" value={jobFormData.jobPosition}
                    onChange={handleJobformData}
                    name="jobPosition" placeholder="Enter job position" />
                <input type="text" value={jobFormData.salary}
                    onChange={handleJobformData}
                    name="salary" placeholder="Enter Salary" />
                <input type="text" name="jobDescription" value={jobFormData.jobDescription} 
                onChange={handleJobformData} placeholder="Enter job description"/>

                <input type="text" name="jobRequirements" value={jobFormData.jobRequirements} 
                onChange={handleJobformData} placeholder="Enter job requirements"/>
                <input type="text" name="location" value={jobFormData.location} 
                onChange={handleJobformData} placeholder="Enter job location" />

                <input type="text" name="skills" value={jobFormData.skills} 
                onChange={handleJobformData} placeholder="Enter required skills"/>

                <input type="text" name="Company" value={jobFormData.Company} 
                onChange={handleJobformData} placeholder="Enter company type"/>

                <select name="jobType" value={jobFormData.jobType} 
                onChange={handleJobformData}>
                    <option value="">Select Job Type</option>
                    <option value="full-time">full-time</option>
                    <option value="part-time">part-time</option>
                    <option value="contract">contract</option>
                    <option value="internship">internship</option>
                    <option value="freelance">freelance</option>
                </select>
                <button type="submit">Post job</button>

            </form>
        </>
    )
}

export default NewJobs;

